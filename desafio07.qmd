---
title: "Desafio 07"
author: "Nicole de Barros Silva"
format: 
  html:
    self-contained: true
editor: visual
---

## Aula 07 - SQLite: inserindo dados + dbplyr

Slide 02
```{r}
library(RSQLite)
library(tidyverse)
if(!"discoCopy.db" %in% list.files(".")){
file.copy("disco.db",
"discoCopy.db")
}
```

```{r}
db <- dbConnect(SQLite(),
"discoCopy.db")
```

Slide 04
```{r}
dbListTables(db)
```
```{r}
dbExecute(db,
"CREATE TABLE instruments
(AlbumId INTEGER,
TrackId INTEGER,
ElectricGuitar INTEGER,
Singer INTEGER,
Trumpet INTEGER)")
```
Slide 05
```{r}
dbListFields(db, 'instruments')
```

```{r}
dbExecute(db, "DROP TABLE instruments")
```
```{r}
dbListTables(db)
```
Slide 07
```{r}
sql = paste("SELECT ArtistId FROM artists",
"WHERE Name = ?")
query <- dbSendQuery(db, sql)
dbBind(query, list("Gilberto Gil"))
aId <- dbFetch(query)
dbClearResult(query)
# Segundo passo interno, não deve causar problema
sql = paste('SELECT Title FROM albums',
'WHERE ArtistId =', aId)
dbGetQuery(db, sql)

```
Slide 08
# Caso tenha excluído a tabela instruments, execute este chunk.
```{r}
dbExecute(db,
"CREATE TABLE instruments
(AlbumId INTEGER,
TrackId INTEGER,
ElectricGuitar INTEGER,
Singer INTEGER,
Trumpet INTEGER)")
```

```{r}
dbListFields(db,'instruments')
```

```{r}
sql = paste('SELECT TrackId, Name FROM tracks',
'WHERE AlbumId = 85')
dbGetQuery(db, sql)
```

Slide 09
```{r}
dbExecute(db,
"INSERT INTO instruments
VALUES ('85', '1075', 0, 1, 0),
('85', '1078', 0, 1, 0); ")
```
```{r}
dbGetQuery(db, "SELECT * FROM instruments")
```

Slide 10
```{r}
dbWriteTable(db, "mtcars", mtcars)
dbListTables(db)
```

```{r}
dbGetQuery(db, "SELECT * FROM mtcars") 
```

Slide 11
```{r}
theAvgCar <- mtcars %>%
summarise_all(function(x) round(mean(x), 2))
theAvgCar
```

```{r}
dbWriteTable(db, "mtcars", theAvgCar, append = TRUE)
dbGetQuery(db, "SELECT * FROM mtcars") %>% tail(3)
```
Slide 12
```{r}
dbWriteTable(db, "mtcars", mtcars, overwrite = TRUE)
dbGetQuery(db, "SELECT * FROM mtcars")
```

Slide 13
```{r}
res <- dbSendQuery(db,
"SELECT * FROM mtcars WHERE cyl = 4")
while(!dbHasCompleted(res)){
chunk <- dbFetch(res, n = 5)
print(nrow(chunk))
}
```

```{r}
#Apenas como exemplo
dbClearResult(res)
```

Slide 14
```{r}
dbDisconnect(db)
```

```{r}
if("discoCopy.db" %in% list.files(".")){
file.remove("discoCopy.db")
}
```

Slide 15
```{r}
#install.packages("vroom")
library(vroom)
```

```{r}
airports <- read_csv("airports.csv"
, col_types = "cccccdd")
airlines <- read_csv("airlines.csv"
, col_types = "cc")
air <- dbConnect(SQLite(), dbname="air.db")
dbWriteTable(air, name = "airports"
, airports)
dbWriteTable(air, name = "airlines"
, airlines)
dbListTables(air)
```

Slide 16
```{r}
dbDisconnect(air)
if("air.db" %in% list.files(".")){
file.remove("air.db")
}

```
Slide 17
```{r}
library(dbplyr)
db <- dbConnect(SQLite(), "disco.db") # original
tracks <- tbl(db, "tracks") # dplyr
tracks
```

Slide 18
```{r}
meanTracks <- tracks %>%
group_by(AlbumId) %>%
summarise(AvLen = mean(Milliseconds, na.rm = TRUE),
AvCost = mean(UnitPrice, na.rm = TRUE))
meanTracks
```

Slide 19
```{r}
meanTracks %>% show_query()
```
Slide 20
```{r}
mT <- meanTracks %>% collect()
mT
```

```{r}
dbDisconnect(db)
```

