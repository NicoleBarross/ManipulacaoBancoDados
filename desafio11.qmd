---
title: "Desafio 11"
author: "Nicole de Barros Silva"
format: 
  html:
    self-contained: true
editor: visual
---

## Laboratório: Introdução ao Polars
## Importação e Manipulação de Dados Utilizando Polars

## Introdução
Polars é uma biblioteca de manipulação de dados em Rust que foi projetada para ser rápida e eficiente, especialmente quando se trata de lidar com grandes conjuntos de dados. A principal vantagem do Polars em comparação com outras bibliotecas de manipulação de dados, como o pandas, é sua capacidade de processar dados em paralelo, aproveitando múltiplos núcleos de CPU. Isso resulta em operações significativamente mais rápidas, permitindo que analistas e cientistas de dados realizem tarefas complexas de transformação e agregação em grandes volumes de dados com eficiência. Além disso, a API do Polars é inspirada na do pandas, o que facilita a transição para usuários que já estão familiarizados com o ecossistema de Python.

Na ciência de dados, a capacidade de manipular e analisar grandes quantidades de dados de forma rápida e eficiente é crucial para a extração de insights significativos. Polars é particularmente valioso em cenários onde o desempenho é uma preocupação, como em análises em tempo real ou no processamento de grandes fluxos de dados. Sua integração com outras bibliotecas populares, como NumPy e Matplotlib, e sua compatibilidade com arquivos em formatos como CSV e Parquet tornam o Polars uma ferramenta versátil para cientistas de dados que buscam otimizar suas operações e maximizar a eficiência de suas análises. Com a crescente demanda por soluções de dados escaláveis, o Polars se destaca como uma opção promissora no arsenal de ferramentas de ciência de dados.

## Objetivos
Ao fim deste laboratório, você deverá:

Ser capaz de importar arquivos tabulares (CSV ou TSV) utilizando a biblioteca Polars.
Organizar e transformar tabelas de dados.
Compreender operações básicas de manipulação de dados, como seleção, filtragem e ordenação.
Calcular estatísticas descritivas e agrupadas utilizando as funções disponíveis no Polars.
Criar visualizações informativas usando plotnine.
Conjunto de Dados
O conjunto de dados “Renda Adulta” contém informações demográficas e econômicas de indivíduos, que são utilizadas para prever se um indivíduo ganha mais ou menos de $50.000 por ano.

## Atividade
1. Utilizando o arquivo renda_adulta.csv e sabendo que ele não possui cabeçalho, faça a importação do banco de dados utilizando os nomes das colunas conforme apresentado acima e na sequência ali indicada. No momento da importação do arquivo, você deve, também, indicar os tipos de cada uma das colunas. Utilize o fato de que o símbolo ? representa valores faltantes.

```{python}
import polars as pl
```

```{python}
# Nomes das colunas conforme a descrição do enunciado
colunas = [
    "age", "workclass", "fnlwgt", "education", "education-num",
    "marital-status", "occupation", "relationship", "race", "sex",
    "capital-gain", "capital-loss", "hours-per-week",
    "native-country", "income"
]

# Tipos de cada coluna
tipos_colunas = [
    pl.Int64, pl.Utf8, pl.Int64, pl.Utf8, pl.Int64,
    pl.Utf8, pl.Utf8, pl.Utf8, pl.Utf8, pl.Utf8,
    pl.Int64, pl.Int64, pl.Int64, pl.Utf8, pl.Utf8
]

# Leitura do arquivo (comprimido em .gz)
df = pl.read_csv(
    "renda_adulta.csv.gz",
    has_header=False,
    new_columns=colunas,
    dtypes=tipos_colunas,
    null_values="?"
)

print(df)
```

2. Apresente os tipos de cada uma das coluna.
```{python}
print(df.schema)  # Exibe o esquema do DataFrame 'df', mostrando o nome e o tipo de dado de cada coluna
```

3. Apresente as dimensões da tabela de dados.
```{python}
print(df.shape) # Mostra o formato do DataFrame 'df', ou seja, uma tupla com (número de linhas, número de colunas)
```

4. Quantas pessoas recebem acima de $50.000 e quantas pessoas recebem abaixo deste limiar?
```{python}
# Contagem de pessoas por categoria de renda
contagem_renda = df["income"].value_counts().sort("income")
print(contagem_renda)
```


5. Crie um objeto chamado renda_longo, no qual você transforma as colunas capital-gain e capital-loss (formato wide) para formato longo. Os valores destas variáveis devem ser armazenados numa nova coluna chamada Valor e os tipos de valores (gain e loss) devem ser armazenados numa coluna chamada tipo.
```{python}
# Transformar de formato wide para formato long
renda_longo = df.melt(
    id_vars=[
        "age", "workclass", "fnlwgt", "education", "education-num",
        "marital-status", "occupation", "relationship", "race",
        "sex", "hours-per-week", "native-country", "income"
    ],                         # colunas que permanecerão fixas
    value_vars=["capital-gain", "capital-loss"],  # colunas que serão empilhadas
    variable_name="tipo",       # nova coluna indicando o tipo (gain ou loss)
    value_name="Valor"          # nova coluna com os valores numéricos
)

print(renda_longo)
```


6. Quais são as médias de horas trabalhadas por classe salarial?
```{python}
# Cálculo da média de horas semanais por classe salarial
media_horas = (
    df.group_by("income")  # agrupa pelas classes de renda
      .agg(
          pl.col("hours-per-week").mean().alias("media_horas")
      )
      .sort("income")     # ordena para exibir <=50K primeiro
)
print(media_horas)
```

7. Se cada linha representa uma pessoa, quantas pessoas foram amostradas em cada profissão?

```{python}
contagem_profissao = (
    df.group_by("occupation") # Agrupa o DataFrame pela coluna 'occupation
      .agg(pl.len().alias("n_pessoas")) # Conta o número de linhas (pessoas) em cada grupo e nomeia a coluna como 'n_pessoas'
      .sort("occupation") # Ordena o resultado em ordem alfabética pelo nome da profissão
)

print(contagem_profissao)
```

8. Crie um gráfico de barras que apresente o número médio de horas trabalhadas semanalmente em função do nível salarial.
```{python}
import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt # Importa a biblioteca Matplotlib para criação de gráficos
```

```{python}
# Criação do gráfico de barras
plt.bar(media_horas["income"], media_horas["media_horas"], color=['skyblue', 'salmon'])
plt.title("Média de horas trabalhadas por classe salarial")
plt.xlabel("Classe salarial")
plt.ylabel("Média de horas semanais")
plt.show()

```

9. Desafio: existe alguma evidência de discriminação salarial entre gêneros biológicos?
```{python}
# Proporção de pessoas que ganham >50K por gênero
proporcao_altos_salarios = (
    df.group_by(["sex", "income"])
      .agg(pl.count().alias("quantidade"))
      .with_columns([
          (pl.col("quantidade") / pl.col("quantidade").sum().over("sex") * 100)
          .alias("percentual")
      ])
      .filter(pl.col("income") == ">50K")
      .sort("sex")
)

print(proporcao_altos_salarios)  # Exibe a tabela final criada, com a quantidade e percentual de pessoas que ganham >50K por gênero biológico
```
Há evidência de desigualdade salarial entre gêneros no dataset, visto que a proporção de pessoas do sexo masculino que recebem mais de $50.000 por ano é significativamente maior do que a do sexo feminino.
Embora a análise não prove discriminação diretamente (visto que pode haver outros fatores correlacionados), ela indica certa disparidade de renda entre os gêneros biológicos.

```{r}
# Registra quando o html foi gerado
cat(paste0("Este HTML foi gerado em: ", Sys.time()))
```